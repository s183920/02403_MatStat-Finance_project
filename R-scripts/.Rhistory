optimize(varP1, maximum = FALSE, interval = c(0,1))$minimum
optimize(varP2, maximum = FALSE, interval = c(0,1))$minimum
optimize(varP3, maximum = FALSE, interval = c(0,1))$minimum
optimize(varP4, maximum = FALSE, interval = c(0,1))$minimum
optimize(varP5, maximum = FALSE, interval = c(0,1))$minimum
optimize(varP6, maximum = FALSE, interval = c(0,1))$minimum
a1 <- optimize(varP1, maximum = FALSE, interval = c(0,1))$minimum
a2 <- optimize(varP2, maximum = FALSE, interval = c(0,1))$minimum
a3 <- optimize(varP3, maximum = FALSE, interval = c(0,1))$minimum
a4 <- optimize(varP4, maximum = FALSE, interval = c(0,1))$minimum
a5 <- optimize(varP5, maximum = FALSE, interval = c(0,1))$minimum
a6 <- optimize(varP6, maximum = FALSE, interval = c(0,1))$minimum
table(a1, a2, a3, a4, a5, a6)
options(scipen=999)
table(a1, a2, a3, a4, a5, a6)
print(table(a1, a2, a3, a4, a5, a6), digits = 5)
data.frame(a1, a2, a3, a4, a5, a6,)
r <- table(a1, a2, a3, a4, a5, a6,)
r <- table(a1, a2, a3, a4, a5, a6)
print(r, digits = 3)
r <- c(a1, a2, a3, a4, a5, a6)
print(r, digits = 3)
P1(a1)
P1 <- function(a){a*EWG+(1-a)*EWW}
P3 <- function(a){a*VAW+(1-a)*IWN}
P2 <- function(a){a*AGG+(1-a)*SPY}
P4 <- function(a){a*VAW+(1-a)*EWG}
P6 <- function(a){a*IWN+(1-a)*EWG}
P5 <- function(a){a*VAW+(1-a)*EWW}
P1(a1)
P2(a2)
data.frame(P1(a1),P2(a2))
data.frame(P1(a1),P2(a2)),P3(a3),P4(a4),P5(a5),P6(a6))
data.frame(P1(a1),P2(a2),P3(a3),P4(a4),P5(a5),P6(a6))
P <- data.frame(P1(a1),P2(a2),P3(a3),P4(a4),P5(a5),P6(a6))
mean(P, 1)
?mean
apply(P, 1, mean)
apply(P, 2, mean)
options(scipen=999)
apply(P, 2, mean)
apply(P*10^3, 2, mean)
apply(P*10^4, 2, mean)
A <- data.frame(a1, a2, a3, a4, a5, a6)
meanP <- apply(P*10^4, 2, mean)
meanP <- data.frame(apply(P*10^4, 2, mean))
View(meanP)
varP <- fata.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
varP <- data.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
A <- t(data.frame(a1, a2, a3, a4, a5, a6))
View(A)
rbind(A, meanP, varP)
meanP <- data.frame(apply(P*10^4, 2, mean))
varP <- data.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
print(A, meanP, varP)
print(c(A, meanP, varP))
A <- data.frame(a1, a2, a3, a4, a5, a6)
View(A)
A <- data.frame(t(c(a1, a2, a3, a4, a5, a6)))
meanP <- data.frame(c(apply(P*10^4, 2, mean))
varP <- data.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
rbind(c(A, meanP, varP))
meanP <- data.frame(c(apply(P*10^4, 2, mean))
varP <- data.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
rbind(c(A, meanP, varP))
meanP <- data.frame(apply(P*10^4, 2, mean)
varP <- data.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
meanP <- data.frame(apply(P*10^4, 2, mean))
min_varP <- data.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
meanP <-  data.frame(mean(P1(a1)),mean(P2(a2)),mean(P3(a3)),mean(P4(a4)),mean(P5(a5)),mean(P6(a6)))
rbind(A, meanP, varP)
cbind(A, meanP, varP)
A <- data.frame(t(c(a1, a2, a3, a4, a5, a6)))
r <- c(a1, a2, a3, a4, a5, a6)
print(r, digits = 3)
P <- data.frame(P1(a1),P2(a2),P3(a3),P4(a4),P5(a5),P6(a6))
meanP <-  data.frame(mean(P1(a1)),mean(P2(a2)),mean(P3(a3)),mean(P4(a4)),mean(P5(a5)),mean(P6(a6)))
min_varP <- data.frame(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
cbind(A, meanP, varP)
tabel <- cbind(A, meanP, varP)
View(tabel)
tabel <- rbind(A, meanP, varP)
tabel <- rbind(A, meanP, min_varP)
tabel <- data.frame(A, meanP, min_varP)
View(tabel)
A <- c(t(c(a1, a2, a3, a4, a5, a6)))
P <- data.frame(P1(a1),P2(a2),P3(a3),P4(a4),P5(a5),P6(a6))
meanP <-  c(mean(P1(a1)),mean(P2(a2)),mean(P3(a3)),mean(P4(a4)),mean(P5(a5)),mean(P6(a6)))
min_varP <- c(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6))
tabel <- data.frame(A, meanP, min_varP)
View(tabel)
meanP <-  c(mean(P1(a1)),mean(P2(a2)),mean(P3(a3)),mean(P4(a4)),mean(P5(a5)),mean(P6(a6)))*10^3
min_varP <- c(varP1(a1), varP2(a2), varP3(a3), varP4(a4), varP5(a5), varP6(a6)) *10^4
tabel <- data.frame(A, meanP, min_varP)
qqnorm(data$AGG,main='Vurdering af normalfordelingsantagelse for AGG',
xlab='z-fraktil',ylab='Afkast')
qqline(data$AGG)
qqnorm(data$AGG,main='Vurdering af normalfordelingsantagelse for AGG',
xlab='z-fraktil',ylab='Afkast')
qqline(data$AGG)
?qqline
etf4 <- data[, c("AGG", "VAW", "IWN", "SPY")]
for (i in etf4) {
qqnorm(i,main='Vurdering af normalfordelingsantagelse for AGG',
xlab='z-fraktil',ylab='Afkast')
qqline(i)
}
par(mfrow= c(2,2))
for (i in etf4) {
qqnorm(i,main='Vurdering af normalfordelingsantagelse for AGG',
xlab='z-fraktil',ylab='Afkast')
qqline(i)
}
qqnorm(i,main='Vurdering af normalfordelingsantagelse for'+string(i),
xlab='z-fraktil',ylab='Afkast')
qqnorm(i,main='Vurdering af normalfordelingsantagelse for'+str(i),
xlab='z-fraktil',ylab='Afkast')
for (i in etf4) {
qqnorm(i,main=cat('Vurdering af normalfordelingsantagelse for', i, sep = '',
xlab='z-fraktil',ylab='Afkast')
qqline(i)
}
cat('<set name="', df$timeStamp, '" value="', df$Price, '"></set>\n', sep='')
for (i in etf4) {
qqnorm(i,main=cat('Vurdering af normalfordelingsantagelse for', i, sep = '',
xlab='z-fraktil',ylab='Afkast')
qqline(i)
}
for (i in etf4) {
qqnorm(i,main=cat('Vurdering af normalfordelingsantagelse for', i, sep = ''),
xlab='z-fraktil',ylab='Afkast')
qqline(i)
}
for (i in etf4) {
qqnorm(i,main=cat('Vurdering af normalfordelingsantagelse for', names(i), sep = ''),
xlab='z-fraktil',ylab='Afkast')
qqline(i)
}
AGG <- data$AGG
VAW <- data$VAW
IWN <- data$IWN
SPY <- data$SPY
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem2.R', echo=TRUE)
ggplot(data = df, aes(x = stock_data)) +
geom_histogram(aes(y = ..density.., fill = stock_name), bins = 50) +
stat_function(fun = dnorm, args = list(mean = mean(stock_data), sd = sd(stock_data)))
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/beskrivende_analyse.R', echo=TRUE)
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/beskrivende_analyse.R', echo=TRUE)
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem2.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem2.R', encoding = 'UTF-8', echo=TRUE)
ggplot(data = df, aes(x = stock_data)) +
geom_histogram(aes(y = ..density.., fill = stock_name), bins = 50) +
stat_function(fun = dnorm, args = list(mean = mean(df$stock_data), sd = sd(df$stock_data)))+
facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))
ggplot(data = df, aes(x = stock_data)) +
geom_histogram(aes(y = ..density.., fill = stock_name), bins = 50) +
stat_function(fun = dnorm, args = list(mean = mean(stock_data), sd = sd(stock_data)))+
facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))
ggplot(data = df, aes(x = stock_data)) +
geom_histogram(aes(y = ..density.., fill = stock_name), bins = 50) +
stat_function(fun = dnorm, args = list(mean = mean(df$stock_data), sd = sd(df$stock_data)))+
facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))
ggplot(data = df, aes(x = stock_data)) +
geom_histogram(aes(y = ..density.., fill = stock_name), bins = 50) +
stat_function(fun = dnorm, args = list(mean = mean(stock_data), sd = sd(stock_data)))+
facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))
ggplot(data = df, aes(x = stock_data)) +
geom_histogram(aes(y = ..density.., fill = stock_name), bins = 50) +
stat_function(fun = dnorm, args = list(mean = c(1,2,4,5), sd = c(1,2,3,5)))+
facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))
ggplot(data = df, aes(x = stock_data)) +
geom_histogram(aes(y = ..density.., fill = stock_name), bins = 50) +
facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(df$stock_data), sd = sd(df$stock_data)))
ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density..), bins = 50) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density.., fill = AGG), bins = 50) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density.., fill = df$stock_name), bins = 50) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density..), bins = 50) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
gg1 <-ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
gg1 <-ggplot(data = data, aes(x = VAW)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$VAW), sd = sd(data$VAW)))
gg2 <-ggplot(data = data, aes(x = VAW)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$VAW), sd = sd(data$VAW)))
multiplot(gg1, gg2, cols = 2)
multiplot(gg1, gg2, cols=2)
gg1 <- ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
gg2 <- ggplot(data = data, aes(x = VAW)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Hyppighed") + ggtitle("Empiriske tæthedsfunktioner \n for de fire udvalgte ETF'er") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$VAW), sd = sd(data$VAW)))
multiplot(gg1, gg2, cols=2)
library(multiplot)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/multiplot.R', echo=TRUE)
multiplot(gg1, gg2, cols=2)
gg3 <- ggplot(data = data, aes(x = IWN)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Tæthed") + ggtitle("Normalfordeling for IWN") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$IWN), sd = sd(data$IWN)))
gg4 <- ggplot(data = data, aes(x = SPY)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Tæthed") + ggtitle("Normalfordeling for SPY") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$SPY), sd = sd(data$SPY)))
multiplot(gg1, gg2, gg3, gg4, cols=2)
gg1 <- ggplot(data = data, aes(x = AGG)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Tæthed") + ggtitle("Normalfordeling for AGG") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$AGG), sd = sd(data$AGG)))
gg2 <- ggplot(data = data, aes(x = VAW)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Tæthed") + ggtitle("Normalfordeling for VAW") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$VAW), sd = sd(data$VAW)))
gg3 <- ggplot(data = data, aes(x = IWN)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Tæthed") + ggtitle("Normalfordeling for IWN") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$IWN), sd = sd(data$IWN)))
gg4 <- ggplot(data = data, aes(x = SPY)) +
geom_histogram(aes(y = ..density..), bins = 100) +
#facet_wrap(~stock_name, nrow = 2, scale = "free") +
xlab("Afkast") + ylab("Tæthed") + ggtitle("Normalfordeling for SPY") +
guides(fill=guide_legend(title="ETF")) +
theme(plot.title = element_text(hjust = .5))+
stat_function(fun = dnorm, args = list(mean = mean(data$SPY), sd = sd(data$SPY)))
multiplot(gg1, gg2, gg3, gg4, cols=2)
multiplot(gg1, gg2, gg3, gg4, rows=2)
n <- nrow(data)
t_quantile <- qt(0.95/2, df = n-1)
conf_etf <- function(data){
mean = mean(data)
sd = sd(data)
int <- t_quantile*sd/sqrt(n)
return(c(mean - int, mean + int))
}
conf_etf(AGG)
t_quantile <- qt(0.95/2, df = n-1)
conf_etf <- function(data){
n = length(data)
mean = mean(data)
sd = sd(data)
int <- t_quantile*sd/sqrt(n)
return(c(mean - int, mean + int))
}
conf_etf(AGG)
?t.test
t.test(AGG, conf.level = 0.95)$conf_int
AGG <- data$AGG
VAW <- data$VAW
IWN <- data$IWN
SPY <- data$SPY
t.test(AGG, conf.level = 0.95)$conf_int
t.test(data$AGG, conf.level = 0.95)$conf_int
t.test(data$AGG, conf.level = 0.95)
t.test(data$AGG, conf.level = 0.95)$conf.int
t.test(data$AGG, conf.level = 0.95)$conf.int
t.test(data$VAW, conf.level = 0.95)$conf.int
t.test(data$IWN, conf.level = 0.95)$conf.int
t.test(data$SPY, conf.level = 0.95)$conf.int
qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG))
c(mean - qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)), mean +qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG))
c(mean - qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)),
mean +qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)))
c(mean - qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)),
mean + qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)))
mean - qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG))
mean + qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)))
mean(data$AGG) - qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG))
c(mean(data) - qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)),
mean(data) + qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)))
c(mean(data$AGG) - qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)),
mean(data$AGG) + qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)))
t.test(data$AGG, conf.level = 0.95)$conf.int
c(mean(data$AGG) - qt(0.975, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)),
mean(data$AGG) + qt(0.95/2, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)))
c(mean(data$AGG) - qt(0.975, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)),
mean(data$AGG) + qt(0.975, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)))
conf_etf <- function(data){
return(c(mean(data$AGG) - qt(0.975, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG)),
mean(data$AGG) + qt(0.975, df = length(data$AGG)-1)*sd(data$AGG)/sqrt(length(data$AGG))))
}
conf_etf(data$AGG)
return(c(mean(data) - qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data)),
mean(data) + qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data))))
conf_etf <- function(data){
k <- c(mean(data) - qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data)),
mean(data) + qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data)))
return()
}
conf_etf(data$AGG)
conf_etf <- function(data){
k <- c(mean(data) - qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data)),
mean(data) + qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data)))
return(k)
}
conf_etf(data$AGG)
conf_sigma <- function(data){
k <- (length(data)-1*)*var(data)/qchisq(1-alpha/2, df = length(data)-1)
return(k)
}
conf_sigma <- function(data){
k <- (length(data)-1)*var(data)/qchisq(1-alpha/2, df = length(data)-1)
return(k)
}
conf_sigma(data$AGG)
alpha <- 1-0.95
conf_sigma <- function(data){
k <- (length(data)-1)*var(data)/qchisq(1-alpha/2, df = length(data)-1)
return(k)
}
conf_sigma(data$AGG)
conf_sigma <- function(data){
k <- c((length(data)-1)*var(data)/qchisq(1-alpha/2, df = length(data)-1),
(length(data)-1)*var(data)/qchisq(alpha/2, df = length(data)-1))
return(k)
}
conf_sigma(data$AGG)
conf_mu(data$AGG)
conf_mu <- function(data){
k <- c(mean(data) - qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data)),
mean(data) + qt(0.975, df = length(data)-1)*sd(data)/sqrt(length(data)))
return(k)
}
conf_mu(data$AGG)
conf_sigma(data$VAW)
conf_sigma(data$IWN)
conf_sigma(data$SPY)
t.test(data$AGG, df = length(data$AGG)-1, mu = 0)
t.test(data$AGG, df = length(data$AGG)-1, mu = 0)
t.test(data$VAW, df = length(data$VAW)-1, mu = 0)
t.test(data$IWN, df = length(data$IWN)-1, mu = 0)
t.test(data$SPY, df = length(data$SPY)-1, mu = 0)
//
?t.test
t.test(data$AGG, df = length(data$AGG)-1, mu = 0, alternative = "greater")
t.test(data$AGG, df = length(data$AGG)-1, mu = 0)#, alternative = "greater")
t.test(data$SPY, df = length(data$SPY)-1, mu = mean(data$AGG))
t.test(data$AGG, df = length(data$SPY)-1, mu = mean(data$SPY))
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem4.R', echo=TRUE)
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem4.R', echo=TRUE)
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem4.R', echo=TRUE)
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem4.R', encoding = 'UTF-8', echo=TRUE)
source('D:/OneDrive/Dokumenter/DTU/Statistik/finans_project/R-scripts/problem4.R', encoding = 'UTF-8', echo=TRUE)
par(mfrow=c(2,1))
plot(etfSum$Volatility, etfSum$CVaR, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Conditional Value at Risk [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
plot(etfSum$Geo.mean, etfSum$maxTuW, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Conditional Value at Risk [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
par(mfrow=c(2,2))
plot(etfSum$Volatility, etfSum$CVaR, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Conditional Value at Risk [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
plot(etfSum$Geo.mean, etfSum$maxTuW, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Conditional Value at Risk [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
plot(etfSum$Volatility, etfSum$maxDD, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Conditional Value at Risk [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
plot(etfSum$maxTuW, etfSum$Volatility, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Conditional Value at Risk [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
par(mar=c(3,3,2,1),mgp=c(2,0.7,0))
par(mfrow=c(2,2))
plot(etfSum$Volatility, etfSum$CVaR, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Conditional Value at Risk [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og CVaR", cex.main=0.8)
plot(etfSum$Geo.mean, etfSum$maxTuW, pch=16, cex=0.7,
xlab="Geometric mean [Ugentligt Pct.]",
ylab="Maximum time under water [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Geo.mean og maxTuW", cex.main=0.8)
plot(etfSum$Volatility, etfSum$maxDD, pch=16, cex=0.7,
xlab="Volatilitet [Ugentligt Pct.]",
ylab="Maximum Draw Down [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem Volatilitet og maxDD", cex.main=0.8)
plot(etfSum$maxTuW, etfSum$Volatility, pch=16, cex=0.7,
xlab="Maximum time under water [Ugentligt Pct.]",
ylab="Volatilitet [Ugentligt Pct.]", cex.lab=0.8,
main="Sammenhæng mellem maxTuW og Volatilitet", cex.main=0.8)
cor(etfSum[,2:7], use="everything", method="pearson")
cov(etfSum_analyse$Geo.mean,etfSum_analyse$maxTuW)
var(etfSum_analyse$Geo.mean)
var(etfSum_analyse$maxTuW)
cov(etfSum$Geo.mean,etfSum_analyse$maxTuW)
var(etfSum$Geo.mean)
var(etfSum$maxTuW)
cov(etfSum$Geo.mean,etfSum_analyse$maxTuW)
cov(etfSum$Geo.mean,etfSum_$maxTuW)
cov(etfSum$Geo.mean,etfSum$maxTuW)
cor(etfSum$Geo.mean,etfSum$maxTuW)
